package com.kasured.peuler

import com.kasured.peuler.p002.FibEvensSum
import org.scalatest.{FeatureSpec, GivenWhenThen, Matchers}

/**
  * @author kasured.
  */
class P002 extends FeatureSpec with Matchers with GivenWhenThen {

   feature("Problem 002") {
     Given(
       """Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
         |
         |1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
         |
         |By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
       """.stripMargin)

     val fibLimit = 4000000
     val sumOfFibEvens = 4613732

     When(s"max allowed Fib number is $fibLimit")

     Then(s"Sum of all even fib numbers is $sumOfFibEvens")

     FibEvensSum.fibEvenSum(fibLimit) shouldBe sumOfFibEvens

   }

 }
